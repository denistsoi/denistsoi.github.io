import{f as n,e as s,s as a}from"./common-67d8f095.js";const p='{"title":"call","frontmatter":{},"headers":[{"level":2,"title":"call","slug":"call"},{"level":2,"title":"apply","slug":"apply"},{"level":2,"title":"bind","slug":"bind"}],"lastUpdated":1591831922650.4688}';var t={};const o=a('<h2 id="call"><a class="header-anchor" href="#call" aria-hidden="true">#</a> call</h2><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n## borrowing prototypes <span class="token keyword">from</span> array\n<span class="token keyword">let</span> <span class="token function-variable function">argsToArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">argsToArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="apply"><a class="header-anchor" href="#apply" aria-hidden="true">#</a> apply</h2><div class="language-js"><pre><code><span class="token keyword">let</span> numArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\nMath<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numArray<span class="token punctuation">)</span>\n</code></pre></div><h2 id="bind"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind</h2><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">asyncGet</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// throws undefined</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncGet</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    \n    <span class="token comment">// that = this;</span>\n    <span class="token comment">// this.asyncGet(function() {</span>\n    <span class="token comment">//   that.parse();</span>\n    <span class="token comment">// })</span>\n\n    <span class="token comment">// this.asyncGet(function() {</span>\n    <span class="token comment">//   this.parse();  </span>\n    <span class="token comment">// }.bind(this))</span>\n\n    <span class="token comment">// this.asyncGet(() =&gt; {</span>\n    <span class="token comment">//   this.parse();</span>\n    <span class="token comment">// })</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nmyObj<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',6);t.render=function(a,p){return s(),n("div",null,[o])};export default t;export{p as __pageData};
