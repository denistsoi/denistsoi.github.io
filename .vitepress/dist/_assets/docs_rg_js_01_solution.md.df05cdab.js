import{f as n,e as s,s as a}from"./common-67d8f095.js";const p='{"title":"Solution","frontmatter":{"prev":"/en/js/01/challenge.md","next":"/en/"},"headers":[{"level":2,"title":"Solution","slug":"solution"}],"lastUpdated":1591831922647.5151}';var t={};const o=a('<h2 id="solution"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution</h2><div class="language-js"><pre><code><span class="token comment">// Rock paper scissors</span>\n<span class="token comment">// constants</span>\n<span class="token keyword">var</span> Rock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> Paper <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> Scissors <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;value is not a number, &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39; chose: &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">||</span> value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;value is not 0, 1 or 2, &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39; chose: &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * game function\n * @description \n * @param {Number} p1 \n * @param {Number} p2 \n * @return {String} resulf of who wins\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">game</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span> p2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// if p1 or p2 !== 0,1,2, return error </span>\n  <span class="token function">validate</span><span class="token punctuation">(</span><span class="token string">&#39;player1&#39;</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">validate</span><span class="token punctuation">(</span><span class="token string">&#39;player2&#39;</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// return draw if p1 is same as p2</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">===</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;draw&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;draw&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// player1 wins</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    p1 <span class="token operator">===</span> Rock     <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">===</span> Scissors <span class="token operator">||</span>\n    p1 <span class="token operator">===</span> Paper    <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">===</span> Rock <span class="token operator">||</span> \n    p1 <span class="token operator">===</span> Scissors <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">===</span> Paper\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p1 wins, p1 picked: &#39;</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> <span class="token string">&#39; p2 picked: &#39;</span> <span class="token operator">+</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;player 1 wins&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p2 wins, p2 picked: &#39;</span> <span class="token operator">+</span> p2 <span class="token operator">+</span> <span class="token string">&#39; p1 picked: &#39;</span> <span class="token operator">+</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;player 2 wins&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// game(0, -1) // should throw error</span>\n<span class="token comment">// game(&#39;srgin&#39;, -1) // should throw error</span>\n<span class="token function">game</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// who wins? // player1 </span>\n<span class="token function">game</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// player1</span>\n<span class="token function">game</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// should return player 2</span>\n</code></pre></div>',2);t.render=function(a,p){return s(),n("div",null,[o])};export default t;export{p as __pageData};
